openapi: 3.0.3
info:
  title: public
  description: ''
  license:
    name: Apache 2.0
  version: 0.22.0
servers:
  - url: https://test.dodopayments.com/
    description: Test Mode Server Host
  - url: https://live.dodopayments.com/
    description: Live Mode Server Host
paths:
  /checkout/supported_countries:
    get:
      tags:
        - Checkout
      operationId: get_supported_countries_proxy
      responses:
        '200':
          description: Currently Supported Countries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountryCodeAlpha2'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const countryCodes = await client.misc.supportedCountries.list();

              console.log(countryCodes);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            country_codes = client.misc.supported_countries.list()
            print(country_codes)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              countryCodes, err := client.Misc.SupportedCountries.List(context.TODO())
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", countryCodes)
            }
  /customers:
    get:
      tags:
        - Customers
      operationId: list_customers
      parameters:
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
      responses:
        '200':
          description: Customers List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomersListResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const customer of client.customers.list()) {
                console.log(customer.business_id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            page = client.customers.list()
            page = page.items[0]
            print(page.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              page, err := client.Customers.List(context.TODO(), dodopayments.CustomerListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", page)
            }
    post:
      tags:
        - Customers
      operationId: create_customer
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const customer = await client.customers.create({ email: 'email', name: 'name' });

              console.log(customer.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            customer = client.customers.create(
                email="email",
                name="name",
            )
            print(customer.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              customer, err := client.Customers.New(context.TODO(), dodopayments.CustomerNewParams{
                Email: dodopayments.F("email"),
                Name: dodopayments.F("name"),
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", customer.BusinessID)
            }
  /customers/{customer_id}:
    get:
      tags:
        - Customers
      operationId: get_customer_handler
      parameters:
        - name: customer_id
          in: path
          description: Customer Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const customer = await client.customers.retrieve('customer_id');

              console.log(customer.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            customer = client.customers.retrieve(
                "customer_id",
            )
            print(customer.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              customer, err := client.Customers.Get(context.TODO(), "customer_id")
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", customer.BusinessID)
            }
    patch:
      tags:
        - Customers
      operationId: patch_customer
      parameters:
        - name: customer_id
          in: path
          description: Customer Id
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCustomerRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const customer = await client.customers.update('customer_id');

              console.log(customer.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            customer = client.customers.update(
                customer_id="customer_id",
            )
            print(customer.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              customer, err := client.Customers.Update(
                context.TODO(),
                "customer_id",
                dodopayments.CustomerUpdateParams{

                },
              )
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", customer.BusinessID)
            }
  /disputes:
    get:
      tags:
        - Disputes
      operationId: list_disputes
      parameters:
        - name: created_at_gte
          in: query
          description: Get events after this created time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: created_at_lte
          in: query
          description: Get events created before this time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: dispute_status
          in: query
          description: Filter by dispute status
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/DisputeStatus'
            nullable: true
        - name: dispute_stage
          in: query
          description: Filter by dispute stage
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/DisputeStage'
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDisputesListResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const dispute of client.disputes.list()) {
                console.log(dispute.business_id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            page = client.disputes.list()
            page = page.items[0]
            print(page.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              page, err := client.Disputes.List(context.TODO(), dodopayments.DisputeListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", page)
            }
  /disputes/{dispute_id}:
    get:
      tags:
        - Disputes
      operationId: get_dispute_handler
      parameters:
        - name: dispute_id
          in: path
          description: Dispute Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const dispute = await client.disputes.retrieve('dispute_id');

              console.log(dispute.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            dispute = client.disputes.retrieve(
                "dispute_id",
            )
            print(dispute.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              dispute, err := client.Disputes.Get(context.TODO(), "dispute_id")
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", dispute.BusinessID)
            }
  /invoices/payments/{payment_id}:
    get:
      tags:
        - Invoices
      operationId: get_payment_invoice_no_auth
      parameters:
        - name: payment_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: PDF document
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              await client.invoices.payments.retrieve('payment_id');
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            client.invoices.payments.retrieve(
                "payment_id",
            )
        - lang: Go
          source: |
            package main

            import (
              "context"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              err := client.Invoices.Payments.Get(context.TODO(), "payment_id")
              if err != nil {
                panic(err.Error())
              }
            }
  /license_key_instances:
    get:
      tags:
        - License Keys
      operationId: list_license_key_instances
      parameters:
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: license_key_id
          in: query
          description: Filter by license key ID
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListLicenseKeyInstancesResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const licenseKeyInstances = await client.licenseKeyInstances.list();

              console.log(licenseKeyInstances);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            license_key_instances = client.license_key_instances.list()
            print(license_key_instances)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              licenseKeyInstances, err := client.LicenseKeyInstances.List(context.TODO(), dodopayments.LicenseKeyInstanceListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", licenseKeyInstances)
            }
  /license_key_instances/{id}:
    get:
      tags:
        - License Keys
      operationId: get_license_key_instance
      parameters:
        - name: id
          in: path
          description: License key instance ID
          required: true
          schema:
            type: string
          example: lki_123
      responses:
        '200':
          description: License key instance found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseKeyInstanceResponse'
        '404':
          description: License key instance not found
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const licenseKeyInstance = await client.licenseKeyInstances.retrieve('lki_123');

              console.log(licenseKeyInstance.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            license_key_instance = client.license_key_instances.retrieve(
                "id",
            )
            print(license_key_instance.id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              licenseKeyInstance, err := client.LicenseKeyInstances.Get(context.TODO(), "lki_123")
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", licenseKeyInstance.ID)
            }
    patch:
      tags:
        - License Keys
      operationId: update_license_key_instance
      parameters:
        - name: id
          in: path
          description: License key instance ID
          required: true
          schema:
            type: string
          example: lki_123
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchLicenseKeyInstanceRequest'
        required: true
      responses:
        '200':
          description: License key instance updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseKeyInstanceResponse'
        '404':
          description: License key instance not found
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const licenseKeyInstance = await client.licenseKeyInstances.update('lki_123', { name: 'name' });

              console.log(licenseKeyInstance.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            license_key_instance = client.license_key_instances.update(
                id="lki_123",
                name="name",
            )
            print(license_key_instance.id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              licenseKeyInstance, err := client.LicenseKeyInstances.Update(
                context.TODO(),
                "lki_123",
                dodopayments.LicenseKeyInstanceUpdateParams{
                  Name: dodopayments.F("name"),
                },
              )
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", licenseKeyInstance.ID)
            }
  /license_keys:
    get:
      tags:
        - License Keys
      operationId: list_license_keys
      parameters:
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: customer_id
          in: query
          description: Filter by customer ID
          required: false
          schema:
            type: string
            nullable: true
        - name: status
          in: query
          description: Filter by license key status
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/LicenseKeyStatus'
            nullable: true
        - name: product_id
          in: query
          description: Filter by product ID
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListLicenseKeysResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const licenseKeys = await client.licenseKeys.list();

              console.log(licenseKeys);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            license_keys = client.license_keys.list()
            print(license_keys)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              licenseKeys, err := client.LicenseKeys.List(context.TODO(), dodopayments.LicenseKeyListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", licenseKeys)
            }
  /license_keys/{id}:
    get:
      tags:
        - License Keys
      operationId: get_license_key_handler
      parameters:
        - name: id
          in: path
          description: License key ID
          required: true
          schema:
            type: string
          example: lic_123
      responses:
        '200':
          description: License key found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseKeyResponse'
        '404':
          description: License key not found
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const licenseKey = await client.licenseKeys.retrieve('lic_123');

              console.log(licenseKey.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            license_key = client.license_keys.retrieve(
                "id",
            )
            print(license_key.id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              licenseKey, err := client.LicenseKeys.Get(context.TODO(), "lic_123")
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", licenseKey.ID)
            }
    patch:
      tags:
        - License Keys
      operationId: update_license_key
      parameters:
        - name: id
          in: path
          description: License key ID
          required: true
          schema:
            type: string
          example: lic_123
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchLicenseKeyRequest'
        required: true
      responses:
        '200':
          description: License key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseKeyResponse'
        '400':
          description: Cannot set expiry for subscription-based license
        '404':
          description: License key not found
        '422':
          description: New activation limit is less than current instances count
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const licenseKey = await client.licenseKeys.update('lic_123');

              console.log(licenseKey.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            license_key = client.license_keys.update(
                id="lic_123",
            )
            print(license_key.id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              licenseKey, err := client.LicenseKeys.Update(
                context.TODO(),
                "lic_123",
                dodopayments.LicenseKeyUpdateParams{

                },
              )
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", licenseKey.ID)
            }
  /licenses/activate:
    post:
      tags:
        - Licenses
      operationId: activate_license_key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateLicenseKeyRequest'
        required: true
      responses:
        '201':
          description: License key instance created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseKeyInstanceResponse'
        '403':
          description: License key cannot be activated (inactive)
        '404':
          description: License key not found
        '422':
          description: License key activation limit reached
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const licenseKeyInstance = await client.licenses.activate({ license_key: 'license_key', name: 'name' });

              console.log(licenseKeyInstance.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            license_key_instance = client.licenses.activate(
                license_key="license_key",
                name="name",
            )
            print(license_key_instance.id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              licenseKeyInstance, err := client.Licenses.Activate(context.TODO(), dodopayments.LicenseActivateParams{
                LicenseKey: dodopayments.F("license_key"),
                Name: dodopayments.F("name"),
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", licenseKeyInstance.ID)
            }
  /licenses/deactivate:
    post:
      tags:
        - Licenses
      operationId: deactivate_license_key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivateLicenseKeyRequest'
        required: true
      responses:
        '200':
          description: License key instance deactivated successfully
        '403':
          description: License key instance not found or does not belong to this license key
        '404':
          description: License key not found
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              await client.licenses.deactivate({
                license_key: 'license_key',
                license_key_instance_id: 'license_key_instance_id',
              });
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            client.licenses.deactivate(
                license_key="license_key",
                license_key_instance_id="license_key_instance_id",
            )
        - lang: Go
          source: |
            package main

            import (
              "context"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              err := client.Licenses.Deactivate(context.TODO(), dodopayments.LicenseDeactivateParams{
                LicenseKey: dodopayments.F("license_key"),
                LicenseKeyInstanceID: dodopayments.F("license_key_instance_id"),
              })
              if err != nil {
                panic(err.Error())
              }
            }
  /licenses/validate:
    post:
      tags:
        - Licenses
      operationId: validate_license_key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateLicenseKeyRequest'
        required: true
      responses:
        '200':
          description: License key validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateLicenseKeyResponse'
        '422':
          description: Invalid request format
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const response = await client.licenses.validate({ license_key: '2b1f8e2d-c41e-4e8f-b2d3-d9fd61c38f43' });

              console.log(response.valid);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            response = client.licenses.validate(
                license_key="2b1f8e2d-c41e-4e8f-b2d3-d9fd61c38f43",
            )
            print(response.valid)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              response, err := client.Licenses.Validate(context.TODO(), dodopayments.LicenseValidateParams{
                LicenseKey: dodopayments.F("2b1f8e2d-c41e-4e8f-b2d3-d9fd61c38f43"),
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.Valid)
            }
  /payments:
    get:
      tags:
        - Payments
      operationId: list_payments
      parameters:
        - name: created_at_gte
          in: query
          description: Get events after this created time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: created_at_lte
          in: query
          description: Get events created before this time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: customer_id
          in: query
          description: Filter by customer id
          required: false
          schema:
            type: string
            nullable: true
        - name: status
          in: query
          description: Filter by status
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/IntentStatus'
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentsListResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const paymentListResponse of client.payments.list()) {
                console.log(paymentListResponse.payment_id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            page = client.payments.list()
            page = page.items[0]
            print(page.payment_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              page, err := client.Payments.List(context.TODO(), dodopayments.PaymentListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", page)
            }
    post:
      tags:
        - Payments
      operationId: create_one_time_payment_handler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOneTimePaymentRequest'
        required: true
      responses:
        '200':
          description: One Time payment successfully initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOneTimePaymentResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const payment = await client.payments.create({
                billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' },
                customer: { customer_id: 'customer_id' },
                product_cart: [{ product_id: 'product_id', quantity: 0 }],
              });

              console.log(payment.payment_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            payment = client.payments.create(
                billing={
                    "city": "city",
                    "country": "AF",
                    "state": "state",
                    "street": "street",
                    "zipcode": "zipcode",
                },
                customer={
                    "customer_id": "customer_id"
                },
                product_cart=[{
                    "product_id": "product_id",
                    "quantity": 0,
                }],
            )
            print(payment.payment_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              payment, err := client.Payments.New(context.TODO(), dodopayments.PaymentNewParams{
                Billing: dodopayments.F(dodopayments.PaymentNewParamsBilling{
                  City: dodopayments.F("city"),
                  Country: dodopayments.F(dodopayments.CountryCodeAf),
                  State: dodopayments.F("state"),
                  Street: dodopayments.F("street"),
                  Zipcode: dodopayments.F("zipcode"),
                }),
                Customer: dodopayments.F[dodopayments.PaymentNewParamsCustomerUnion](dodopayments.PaymentNewParamsCustomerAttachExistingCustomer{
                  CustomerID: dodopayments.F("customer_id"),
                }),
                ProductCart: dodopayments.F([]dodopayments.PaymentNewParamsProductCart{dodopayments.PaymentNewParamsProductCart{
                  ProductID: dodopayments.F("product_id"),
                  Quantity: dodopayments.F(int64(0)),
                }}),
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", payment.PaymentID)
            }
  /payments/{payment_id}:
    get:
      tags:
        - Payments
      operationId: get_payment_handler
      parameters:
        - name: payment_id
          in: path
          description: Payment Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const payment = await client.payments.retrieve('payment_id');

              console.log(payment.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            payment = client.payments.retrieve(
                "payment_id",
            )
            print(payment.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              payment, err := client.Payments.Get(context.TODO(), "payment_id")
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", payment.BusinessID)
            }
  /payouts:
    get:
      tags:
        - Payouts
      operationId: list_payouts
      parameters:
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
      responses:
        '200':
          description: Payouts List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPayoutsResponseList'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const payoutListResponse of client.payouts.list()) {
                console.log(payoutListResponse.business_id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            page = client.payouts.list()
            page = page.items[0]
            print(page.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              page, err := client.Payouts.List(context.TODO(), dodopayments.PayoutListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", page)
            }
  /products:
    get:
      tags:
        - Products
      operationId: list_products
      parameters:
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: archived
          in: query
          description: List archived products
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Products List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductsListResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const productListResponse of client.products.list()) {
                console.log(productListResponse.business_id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            page = client.products.list()
            page = page.items[0]
            print(page.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              page, err := client.Products.List(context.TODO(), dodopayments.ProductListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", page)
            }
    post:
      tags:
        - Products
      operationId: create_product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
        required: true
      responses:
        '200':
          description: Product Created Succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const product = await client.products.create({
                price: { currency: 'AED', discount: 0, price: 0, purchasing_power_parity: true, type: 'one_time_price' },
                tax_category: 'digital_products',
              });

              console.log(product.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            product = client.products.create(
                price={
                    "currency": "AED",
                    "discount": 0,
                    "price": 0,
                    "purchasing_power_parity": True,
                    "type": "one_time_price",
                },
                tax_category="digital_products",
            )
            print(product.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              product, err := client.Products.New(context.TODO(), dodopayments.ProductNewParams{
                Price: dodopayments.F[dodopayments.ProductNewParamsPriceUnion](dodopayments.ProductNewParamsPriceOneTimePrice{
                  Currency: dodopayments.F(dodopayments.ProductNewParamsPriceOneTimePriceCurrencyAed),
                  Discount: dodopayments.F(0.000000),
                  Price: dodopayments.F(int64(0)),
                  PurchasingPowerParity: dodopayments.F(true),
                  Type: dodopayments.F(dodopayments.ProductNewParamsPriceOneTimePriceTypeOneTimePrice),
                }),
                TaxCategory: dodopayments.F(dodopayments.ProductNewParamsTaxCategoryDigitalProducts),
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", product.BusinessID)
            }
  /products/{id}:
    get:
      tags:
        - Products
      operationId: get_product_handler
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const product = await client.products.retrieve('id');

              console.log(product.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            product = client.products.retrieve(
                "id",
            )
            print(product.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              product, err := client.Products.Get(context.TODO(), "id")
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", product.BusinessID)
            }
    delete:
      tags:
        - Products
      operationId: delete_product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product Delected Succesfully
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              await client.products.delete('id');
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            client.products.delete(
                "id",
            )
        - lang: Go
          source: |
            package main

            import (
              "context"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              err := client.Products.Delete(context.TODO(), "id")
              if err != nil {
                panic(err.Error())
              }
            }
    patch:
      tags:
        - Products
      operationId: patch_product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchProductRequest'
        required: true
      responses:
        '200':
          description: Product Updated Succesfully
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              await client.products.update('id');
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            client.products.update(
                id="id",
            )
        - lang: Go
          source: |
            package main

            import (
              "context"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              err := client.Products.Update(
                context.TODO(),
                "id",
                dodopayments.ProductUpdateParams{

                },
              )
              if err != nil {
                panic(err.Error())
              }
            }
  /products/{id}/images:
    put:
      tags:
        - Products
      operationId: update_product_image
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          schema:
            type: string
        - name: force_update
          in: query
          required: false
          schema:
            type: boolean
            nullable: true
      responses:
        '200':
          description: Aws s3 presigned URL. Upload image to this URL within 60s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProductImageResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const image = await client.products.images.update('id');

              console.log(image.image_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            image = client.products.images.update(
                id="id",
            )
            print(image.image_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              image, err := client.Products.Images.Update(
                context.TODO(),
                "id",
                dodopayments.ProductImageUpdateParams{

                },
              )
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", image.ImageID)
            }
  /products/{id}/unarchive:
    post:
      tags:
        - Products
      operationId: undelete_product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product Delected Succesfully
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              await client.products.unarchive('id');
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            client.products.unarchive(
                "id",
            )
        - lang: Go
          source: |
            package main

            import (
              "context"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              err := client.Products.Unarchive(context.TODO(), "id")
              if err != nil {
                panic(err.Error())
              }
            }
  /refunds:
    get:
      tags:
        - Refunds
      operationId: list_refunds
      parameters:
        - name: created_at_gte
          in: query
          description: Get events after this created time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: created_at_lte
          in: query
          description: Get events created before this time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: status
          in: query
          description: Filter by status
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/RefundStatus'
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRefundsListResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const refund of client.refunds.list()) {
                console.log(refund.business_id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            page = client.refunds.list()
            page = page.items[0]
            print(page.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              page, err := client.Refunds.List(context.TODO(), dodopayments.RefundListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", page)
            }
    post:
      tags:
        - Refunds
      operationId: create_refund
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRefundRequest'
        required: true
      responses:
        '200':
          description: Refund successfully initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const refund = await client.refunds.create({ payment_id: 'payment_id' });

              console.log(refund.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            refund = client.refunds.create(
                payment_id="payment_id",
            )
            print(refund.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              refund, err := client.Refunds.New(context.TODO(), dodopayments.RefundNewParams{
                PaymentID: dodopayments.F("payment_id"),
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", refund.BusinessID)
            }
  /refunds/{refund_id}:
    get:
      tags:
        - Refunds
      operationId: get_refund_handler
      parameters:
        - name: refund_id
          in: path
          description: Refund Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const refund = await client.refunds.retrieve('refund_id');

              console.log(refund.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            refund = client.refunds.retrieve(
                "refund_id",
            )
            print(refund.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              refund, err := client.Refunds.Get(context.TODO(), "refund_id")
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", refund.BusinessID)
            }
  /subscriptions:
    get:
      tags:
        - Subscriptions
      operationId: list_subscriptions
      parameters:
        - name: created_at_gte
          in: query
          description: Get events after this created time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: created_at_lte
          in: query
          description: Get events created before this time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: customer_id
          in: query
          description: Filter by customer id
          required: false
          schema:
            type: string
            nullable: true
        - name: status
          in: query
          description: Filter by status
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SubscriptionStatus'
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionsListResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const subscription of client.subscriptions.list()) {
                console.log(subscription.product_id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            page = client.subscriptions.list()
            page = page.items[0]
            print(page.product_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              page, err := client.Subscriptions.List(context.TODO(), dodopayments.SubscriptionListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", page)
            }
    post:
      tags:
        - Subscriptions
      operationId: create_subscription_handler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionRequest'
        required: true
      responses:
        '200':
          description: Subscription successfully initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSubscriptionResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const subscription = await client.subscriptions.create({
                billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' },
                customer: { customer_id: 'customer_id' },
                product_id: 'product_id',
                quantity: 0,
              });

              console.log(subscription.subscription_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            subscription = client.subscriptions.create(
                billing={
                    "city": "city",
                    "country": "AF",
                    "state": "state",
                    "street": "street",
                    "zipcode": "zipcode",
                },
                customer={
                    "customer_id": "customer_id"
                },
                product_id="product_id",
                quantity=0,
            )
            print(subscription.subscription_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              subscription, err := client.Subscriptions.New(context.TODO(), dodopayments.SubscriptionNewParams{
                Billing: dodopayments.F(dodopayments.SubscriptionNewParamsBilling{
                  City: dodopayments.F("city"),
                  Country: dodopayments.F(dodopayments.CountryCodeAf),
                  State: dodopayments.F("state"),
                  Street: dodopayments.F("street"),
                  Zipcode: dodopayments.F("zipcode"),
                }),
                Customer: dodopayments.F[dodopayments.SubscriptionNewParamsCustomerUnion](dodopayments.SubscriptionNewParamsCustomerAttachExistingCustomer{
                  CustomerID: dodopayments.F("customer_id"),
                }),
                ProductID: dodopayments.F("product_id"),
                Quantity: dodopayments.F(int64(0)),
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", subscription.SubscriptionID)
            }
  /subscriptions/{subscription_id}:
    get:
      tags:
        - Subscriptions
      operationId: get_subscription_handler
      parameters:
        - name: subscription_id
          in: path
          description: Subscription Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const subscription = await client.subscriptions.retrieve('subscription_id');

              console.log(subscription.product_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            subscription = client.subscriptions.retrieve(
                "subscription_id",
            )
            print(subscription.product_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              subscription, err := client.Subscriptions.Get(context.TODO(), "subscription_id")
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", subscription.ProductID)
            }
    patch:
      tags:
        - Subscriptions
      operationId: patch_subscription
      parameters:
        - name: subscription_id
          in: path
          description: Subscription Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSubscriptionRequest'
        required: true
      responses:
        '200':
          description: Subscription successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const subscription = await client.subscriptions.update('subscription_id');

              console.log(subscription.product_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            subscription = client.subscriptions.update(
                subscription_id="subscription_id",
            )
            print(subscription.product_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              subscription, err := client.Subscriptions.Update(
                context.TODO(),
                "subscription_id",
                dodopayments.SubscriptionUpdateParams{

                },
              )
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", subscription.ProductID)
            }
  /webhook_events:
    get:
      tags:
        - Webhook Events
      operationId: list_webhook_events
      parameters:
        - name: created_at_gte
          in: query
          description: Get events after this created time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: created_at_lte
          in: query
          description: Get events created before this time
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
        - name: limit
          in: query
          description: 'Min : 1, Max : 100, default 10'
          required: false
          schema:
            type: integer
            format: int64
            nullable: true
        - name: object_id
          in: query
          description: Get events history of a specific object like payment/subscription/refund/dispute
          required: false
          schema:
            type: string
            nullable: true
        - name: page_size
          in: query
          description: Page size default is 10 max is 100
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
        - name: page_number
          in: query
          description: Page number default is 0
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
            minimum: 0
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWebhookEventsResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const webhookEvent of client.webhookEvents.list()) {
                console.log(webhookEvent.business_id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            page = client.webhook_events.list()
            page = page.items[0]
            print(page.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              page, err := client.WebhookEvents.List(context.TODO(), dodopayments.WebhookEventListParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", page)
            }
  /webhook_events/{webhook_event_id}:
    get:
      tags:
        - Webhook Events
      operationId: get_webhook_event
      parameters:
        - name: webhook_event_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEventLogResponse'
      security:
        - API_KEY: []
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import DodoPayments from 'dodopayments';

            const client = new DodoPayments({
              bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const webhookEvent = await client.webhookEvents.retrieve('webhook_event_id');

              console.log(webhookEvent.business_id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from dodopayments import DodoPayments

            client = DodoPayments(
                bearer_token=os.environ.get("DODO_PAYMENTS_API_KEY"),  # This is the default and can be omitted
            )
            webhook_event = client.webhook_events.retrieve(
                "webhook_event_id",
            )
            print(webhook_event.business_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/dodopayments/dodopayments-go"
              "github.com/dodopayments/dodopayments-go/option"
            )

            func main() {
              client := dodopayments.NewClient(
                option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("DODO_PAYMENTS_API_KEY")
              )
              webhookEvent, err := client.WebhookEvents.Get(context.TODO(), "webhook_event_id")
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", webhookEvent.BusinessID)
            }
  /your-webhook-url:
    post:
      tags:
        - Outgoing Webhooks
      operationId: dummy_handler_for_outgoing_webhook_docs
      parameters:
        - name: webhook-id
          in: header
          description: Unique identifier for the webhook
          required: true
          schema:
            type: string
        - name: webhook-signature
          in: header
          description: Signature of the Webhook
          required: true
          schema:
            type: string
        - name: webhook-timestamp
          in: header
          description: Unix timestamp when the webhook was sent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutgoingWebhook'
        required: true
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid request
        '401':
          description: Invalid webhook signature
components:
  schemas:
    ActivateLicenseKeyRequest:
      type: object
      required:
        - name
        - license_key
      properties:
        license_key:
          type: string
        name:
          type: string
    AttachExistingCustomer:
      title: Attach Existing Customer
      type: object
      required:
        - customer_id
      properties:
        customer_id:
          type: string
    BillingAddress:
      type: object
      required:
        - country
        - state
        - city
        - street
        - zipcode
      properties:
        city:
          type: string
          description: City name
        country:
          $ref: '#/components/schemas/CountryCodeAlpha2'
        state:
          type: string
          description: State or province name
        street:
          type: string
          description: Street address including house number and unit/apartment if applicable
        zipcode:
          type: string
          description: Postal code or ZIP code
    CountryCodeAlpha2:
      type: string
      description: ISO country code alpha2 variant
    CreateCustomerRequest:
      type: object
      required:
        - name
        - email
      properties:
        email:
          type: string
        name:
          type: string
        phone_number:
          type: string
          nullable: true
    CreateNewCustomer:
      title: Create New Customer
      type: object
      required:
        - name
        - email
      properties:
        create_new_customer:
          type: boolean
          description: |-
            When false, the most recently created customer object with the given email is used if exists.
            When true, a new customer object is always created
            False by default
        email:
          type: string
        name:
          type: string
        phone_number:
          type: string
          nullable: true
    CreateOneTimePaymentRequest:
      type: object
      required:
        - product_cart
        - customer
        - billing
      properties:
        billing:
          $ref: '#/components/schemas/BillingAddress'
        customer:
          $ref: '#/components/schemas/CustomerRequest'
        metadata:
          $ref: '#/components/schemas/Metadata'
        payment_link:
          type: boolean
          description: Whether to generate a payment link. Defaults to false if not specified.
          nullable: true
        product_cart:
          type: array
          items:
            $ref: '#/components/schemas/OneTimeProductCartItemReq'
          description: List of products in the cart. Must contain at least 1 and at most 100 items.
        return_url:
          type: string
          description: |-
            Optional URL to redirect the customer after payment.
            Must be a valid URL if provided.
          nullable: true
        tax_id:
          type: string
          description: Tax ID in case the payment is B2B. If tax id validation fails the payment creation will fail
          nullable: true
    CreateOneTimePaymentResponse:
      type: object
      required:
        - payment_id
        - total_amount
        - client_secret
        - customer
        - metadata
      properties:
        client_secret:
          type: string
          description: |-
            Client secret used to load Dodo checkout SDK
            NOTE : Dodo checkout SDK will be coming soon
        customer:
          $ref: '#/components/schemas/CustomerLimitedDetailsResponse'
        metadata:
          $ref: '#/components/schemas/Metadata'
        payment_id:
          type: string
          description: Unique identifier for the payment
        payment_link:
          type: string
          description: Optional URL to a hosted payment page
          nullable: true
        product_cart:
          type: array
          items:
            $ref: '#/components/schemas/OneTimeProductCartItemReq'
          description: Optional list of products included in the payment
          nullable: true
        total_amount:
          type: integer
          format: int32
          description: Total amount of the payment in smallest currency unit (e.g. cents)
          minimum: 0
    CreateProductRequest:
      type: object
      required:
        - tax_category
        - price
      properties:
        description:
          type: string
          description: Optional description of the product
          nullable: true
        license_key_activation_message:
          type: string
          description: Optional message displayed during license key activation
          nullable: true
        license_key_activations_limit:
          type: integer
          format: int32
          description: |-
            The number of times the license key can be activated.
            Must be 0 or greater
          nullable: true
        license_key_duration:
          allOf:
            - $ref: '#/components/schemas/LicenseKeyDuration'
          nullable: true
        license_key_enabled:
          type: boolean
          description: |-
            When true, generates and sends a license key to your customer.
            Defaults to false
          nullable: true
        name:
          type: string
          description: Optional name of the product
          nullable: true
        price:
          $ref: '#/components/schemas/Price'
        tax_category:
          $ref: '#/components/schemas/TaxCategory'
    CreateRefundRequest:
      type: object
      required:
        - payment_id
      properties:
        amount:
          type: integer
          format: int32
          description: |-
            The amount to be refunded. Must be non-negative. Optional.
            Partial refunds are currently disabled.
          nullable: true
        payment_id:
          type: string
          description: The unique identifier of the payment to be refunded.
        reason:
          type: string
          description: The reason for the refund, if any. Maximum length is 3000 characters. Optional.
          nullable: true
    CreateSubscriptionRequest:
      type: object
      description: |-
        Request payload for creating a new subscription

        This struct represents the data required to create a new subscription in the system.
        It includes details about the product, quantity, customer information, and billing details.
      required:
        - product_id
        - quantity
        - customer
        - billing
      properties:
        billing:
          $ref: '#/components/schemas/BillingAddress'
        customer:
          $ref: '#/components/schemas/CustomerRequest'
        metadata:
          $ref: '#/components/schemas/Metadata'
        payment_link:
          type: boolean
          description: |-
            If true, generates a payment link.
            Defaults to false if not specified.
          nullable: true
        product_id:
          type: string
          description: Unique identifier of the product to subscribe to
        quantity:
          type: integer
          format: int32
          description: Number of units to subscribe for. Must be at least 1.
          minimum: 0
        return_url:
          type: string
          description: Optional URL to redirect after successful subscription creation
          nullable: true
        tax_id:
          type: string
          description: Tax ID in case the payment is B2B. If tax id validation fails the payment creation will fail
          nullable: true
        trial_period_days:
          type: integer
          format: int32
          description: |-
            Optional trial period in days
            If specified, this value overrides the trial period set in the product's price
            Must be between 0 and 10000 days
          nullable: true
    CreateSubscriptionResponse:
      type: object
      required:
        - subscription_id
        - recurring_pre_tax_amount
        - customer
        - metadata
      properties:
        client_secret:
          type: string
          description: |-
            Client secret used to load Dodo checkout SDK
            NOTE : Dodo checkout SDK will be coming soon
          nullable: true
        customer:
          $ref: '#/components/schemas/CustomerLimitedDetailsResponse'
        metadata:
          $ref: '#/components/schemas/Metadata'
        payment_link:
          type: string
          description: URL to checkout page
          nullable: true
        recurring_pre_tax_amount:
          type: integer
          format: int32
          description: Tax will be added to the amount and charged to the customer on each billing cycle
          minimum: 0
        subscription_id:
          type: string
          description: Unique identifier for the subscription
    Currency:
      type: string
      enum:
        - AED
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BRL
        - BSD
        - BWP
        - BYN
        - BZD
        - CAD
        - CHF
        - CLP
        - CNY
        - COP
        - CRC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRU
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SEK
        - SGD
        - SHP
        - SLE
        - SLL
        - SOS
        - SRD
        - SSP
        - STN
        - SVC
        - SZL
        - THB
        - TND
        - TOP
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - UYU
        - UZS
        - VES
        - VND
        - VUV
        - WST
        - XAF
        - XCD
        - XOF
        - XPF
        - YER
        - ZAR
        - ZMW
    CustomerLimitedDetailsResponse:
      type: object
      required:
        - customer_id
        - name
        - email
      properties:
        customer_id:
          type: string
          description: Unique identifier for the customer
        email:
          type: string
          description: Email address of the customer
        name:
          type: string
          description: Full name of the customer
    CustomerRequest:
      oneOf:
        - $ref: '#/components/schemas/AttachExistingCustomer'
        - $ref: '#/components/schemas/CreateNewCustomer'
    CustomerResponse:
      type: object
      required:
        - customer_id
        - business_id
        - name
        - email
        - created_at
      properties:
        business_id:
          type: string
        created_at:
          type: string
          format: date-time
        customer_id:
          type: string
        email:
          type: string
        name:
          type: string
        phone_number:
          type: string
          nullable: true
    DeactivateLicenseKeyRequest:
      type: object
      required:
        - license_key
        - license_key_instance_id
      properties:
        license_key:
          type: string
        license_key_instance_id:
          type: string
    DisputeResponse:
      type: object
      required:
        - dispute_id
        - payment_id
        - business_id
        - amount
        - currency
        - dispute_status
        - dispute_stage
        - created_at
      properties:
        amount:
          type: string
          description: The amount involved in the dispute, represented as a string to accommodate precision.
        business_id:
          type: string
          description: The unique identifier of the business involved in the dispute.
        created_at:
          type: string
          format: date-time
          description: The timestamp of when the dispute was created, in UTC.
        currency:
          type: string
          description: The currency of the disputed amount, represented as an ISO 4217 currency code.
        dispute_id:
          type: string
          description: The unique identifier of the dispute.
        dispute_stage:
          $ref: '#/components/schemas/DisputeStage'
        dispute_status:
          $ref: '#/components/schemas/DisputeStatus'
        payment_id:
          type: string
          description: The unique identifier of the payment associated with the dispute.
    DisputeStage:
      type: string
      enum:
        - pre_dispute
        - dispute
        - pre_arbitration
    DisputeStatus:
      type: string
      enum:
        - dispute_opened
        - dispute_expired
        - dispute_accepted
        - dispute_cancelled
        - dispute_challenged
        - dispute_won
        - dispute_lost
    EventType:
      type: string
      description: Event types for Dodo events
      enum:
        - payment.succeeded
        - payment.failed
        - payment.processing
        - payment.cancelled
        - refund.succeeded
        - refund.failed
        - dispute.opened
        - dispute.expired
        - dispute.accepted
        - dispute.cancelled
        - dispute.challenged
        - dispute.won
        - dispute.lost
        - subscription.active
        - subscription.renewed
        - subscription.on_hold
        - subscription.paused
        - subscription.cancelled
        - subscription.failed
        - subscription.expired
        - license_key.created
    GetCustomersListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CustomerResponse'
    GetDisputesListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DisputeResponse'
    GetPaymentsListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GetPaymentsListResponseItem'
    GetPaymentsListResponseItem:
      type: object
      required:
        - payment_id
        - total_amount
        - currency
        - customer
        - created_at
        - metadata
      properties:
        created_at:
          type: string
          format: date-time
        currency:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/CustomerLimitedDetailsResponse'
        metadata:
          $ref: '#/components/schemas/Metadata'
        payment_id:
          type: string
        payment_method:
          type: string
          nullable: true
        payment_method_type:
          type: string
          nullable: true
        status:
          allOf:
            - $ref: '#/components/schemas/IntentStatus'
          nullable: true
        subscription_id:
          type: string
          nullable: true
        total_amount:
          type: integer
          format: int32
    GetPayoutsResponseList:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PayoutsResponse'
    GetProductResponse:
      type: object
      required:
        - product_id
        - business_id
        - created_at
        - updated_at
        - is_recurring
        - tax_category
        - price
        - license_key_enabled
      properties:
        business_id:
          type: string
          description: Unique identifier for the business to which the product belongs.
        created_at:
          type: string
          format: date-time
          description: Timestamp when the product was created.
        description:
          type: string
          description: Description of the product, optional.
          nullable: true
        image:
          type: string
          description: URL of the product image, optional.
          nullable: true
        is_recurring:
          type: boolean
          description: Indicates if the product is recurring (e.g., subscriptions).
        license_key_activation_message:
          type: string
          description: Message sent upon license key activation, if applicable.
          nullable: true
        license_key_activations_limit:
          type: integer
          format: int32
          description: Limit on the number of activations for the license key, if enabled.
          nullable: true
        license_key_duration:
          allOf:
            - $ref: '#/components/schemas/LicenseKeyDuration'
          nullable: true
        license_key_enabled:
          type: boolean
          description: Indicates whether the product requires a license key.
        name:
          type: string
          description: Name of the product, optional.
          nullable: true
        price:
          $ref: '#/components/schemas/Price'
        product_id:
          type: string
          description: Unique identifier for the product.
        tax_category:
          $ref: '#/components/schemas/TaxCategory'
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the product was last updated.
    GetProductsListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GetProductsListResponseItem'
    GetProductsListResponseItem:
      type: object
      required:
        - product_id
        - business_id
        - created_at
        - updated_at
        - is_recurring
        - tax_category
      properties:
        business_id:
          type: string
          description: Unique identifier for the business to which the product belongs.
        created_at:
          type: string
          format: date-time
          description: Timestamp when the product was created.
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
          nullable: true
        description:
          type: string
          description: Description of the product, optional.
          nullable: true
        image:
          type: string
          description: URL of the product image, optional.
          nullable: true
        is_recurring:
          type: boolean
          description: Indicates if the product is recurring (e.g., subscriptions).
        name:
          type: string
          description: Name of the product, optional.
          nullable: true
        price:
          type: integer
          format: int32
          description: |-
            Price of the product, optional.

            The price is represented in the lowest denomination of the currency.
            For example:
            - In USD, a price of `$12.34` would be represented as `1234` (cents).
            - In JPY, a price of `¥1500` would be represented as `1500` (yen).
            - In INR, a price of `₹1234.56` would be represented as `123456` (paise).

            This ensures precision and avoids floating-point rounding errors.
          nullable: true
        price_detail:
          allOf:
            - $ref: '#/components/schemas/Price'
          nullable: true
        product_id:
          type: string
          description: Unique identifier for the product.
        tax_category:
          $ref: '#/components/schemas/TaxCategory'
        tax_inclusive:
          type: boolean
          description: Indicates if the price is tax inclusive
          nullable: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the product was last updated.
    GetRefundsListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/RefundResponse'
    GetSubscriptionsListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionResponse'
    IntentStatus:
      type: string
      enum:
        - succeeded
        - failed
        - cancelled
        - processing
        - requires_customer_action
        - requires_merchant_action
        - requires_payment_method
        - requires_confirmation
        - requires_capture
        - partially_captured
        - partially_captured_and_capturable
    LicenseKeyDuration:
      type: object
      required:
        - count
        - interval
      properties:
        count:
          type: integer
          format: int32
        interval:
          $ref: '#/components/schemas/TimeInterval'
    LicenseKeyInstanceResponse:
      type: object
      required:
        - id
        - business_id
        - name
        - license_key_id
        - created_at
      properties:
        business_id:
          type: string
        created_at:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00Z'
        id:
          type: string
          example: lki_123
        license_key_id:
          type: string
          example: lic_123
        name:
          type: string
          example: Production Server 1
    LicenseKeyResponse:
      type: object
      required:
        - id
        - business_id
        - key
        - status
        - customer_id
        - product_id
        - payment_id
        - instances_count
        - created_at
      properties:
        activations_limit:
          type: integer
          format: int32
          description: The maximum number of activations allowed for this license key.
          example: 5
          nullable: true
        business_id:
          type: string
          description: The unique identifier of the business associated with the license key.
        created_at:
          type: string
          format: date-time
          description: The timestamp indicating when the license key was created, in UTC.
          example: '2024-01-01T00:00:00Z'
        customer_id:
          type: string
          description: The unique identifier of the customer associated with the license key.
          example: cus_123
        expires_at:
          type: string
          format: date-time
          description: The timestamp indicating when the license key expires, in UTC.
          example: '2024-12-31T23:59:59Z'
          nullable: true
        id:
          type: string
          description: The unique identifier of the license key.
          example: lic_123
        instances_count:
          type: integer
          format: int32
          description: The current number of instances activated for this license key.
        key:
          type: string
          description: The license key string.
        payment_id:
          type: string
          description: The unique identifier of the payment associated with the license key.
        product_id:
          type: string
          description: The unique identifier of the product associated with the license key.
        status:
          $ref: '#/components/schemas/LicenseKeyStatus'
        subscription_id:
          type: string
          description: The unique identifier of the subscription associated with the license key, if any.
          nullable: true
    LicenseKeyStatus:
      type: string
      enum:
        - active
        - expired
        - disabled
    ListLicenseKeyInstancesResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LicenseKeyInstanceResponse'
    ListLicenseKeysResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LicenseKeyResponse'
    ListWebhookEventsResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEventLogResponse'
    Metadata:
      type: object
      additionalProperties:
        type: string
    OneTimePrice:
      type: object
      required:
        - price
        - currency
        - discount
        - purchasing_power_parity
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        discount:
          type: number
          format: float
          description: Discount applied to the price, represented as a percentage (0 to 100).
        pay_what_you_want:
          type: boolean
          description: |-
            Indicates whether the customer can pay any amount they choose.
            If set to `true`, the [`price`](Self::price) field is the minimum amount.
        price:
          type: integer
          format: int32
          description: |-
            The payment amount, in the smallest denomination of the currency (e.g., cents for USD).
            For example, to charge $1.00, pass `100`.

            If [`pay_what_you_want`](Self::pay_what_you_want) is set to `true`, this field represents
            the **minimum** amount the customer must pay.
        purchasing_power_parity:
          type: boolean
          description: |-
            Indicates if purchasing power parity adjustments are applied to the price.
            Purchasing power parity feature is not available as of now.
        suggested_price:
          type: integer
          format: int32
          description: |-
            A suggested price for the user to pay. This value is only considered if
            [`pay_what_you_want`](Self::pay_what_you_want) is `true`. Otherwise, it is ignored.
          nullable: true
        tax_inclusive:
          type: boolean
          description: Indicates if the price is tax inclusive.
          nullable: true
    OneTimeProductCartItemReq:
      type: object
      required:
        - product_id
        - quantity
      properties:
        amount:
          type: integer
          format: int32
          description: Amount the customer pays if pay_what_you_want is enabled. If disabled then amount will be ignored
          nullable: true
        product_id:
          type: string
        quantity:
          type: integer
          format: int32
          minimum: 0
    OneTimeProductCartItemResponse:
      type: object
      required:
        - product_id
        - quantity
      properties:
        product_id:
          type: string
        quantity:
          type: integer
          format: int32
          minimum: 0
    OutgoingWebhook:
      type: object
      required:
        - business_id
        - type
        - timestamp
        - data
      properties:
        business_id:
          type: string
        data:
          $ref: '#/components/schemas/OutgoingWebhookData'
        timestamp:
          type: string
          format: date-time
          description: The timestamp of when the event occurred (not necessarily the same of when it was delivered)
        type:
          $ref: '#/components/schemas/EventType'
    OutgoingWebhookData:
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/PaymentResponse'
            - type: object
              required:
                - payload_type
              properties:
                payload_type:
                  type: string
                  enum:
                    - Payment
          title: Payment
        - allOf:
            - $ref: '#/components/schemas/SubscriptionResponse'
            - type: object
              required:
                - payload_type
              properties:
                payload_type:
                  type: string
                  enum:
                    - Subscription
          title: Subscription
        - allOf:
            - $ref: '#/components/schemas/RefundResponse'
            - type: object
              required:
                - payload_type
              properties:
                payload_type:
                  type: string
                  enum:
                    - Refund
          title: Refund
        - allOf:
            - $ref: '#/components/schemas/DisputeResponse'
            - type: object
              required:
                - payload_type
              properties:
                payload_type:
                  type: string
                  enum:
                    - Dispute
          title: Dispute
        - allOf:
            - $ref: '#/components/schemas/LicenseKeyResponse'
            - type: object
              required:
                - payload_type
              properties:
                payload_type:
                  type: string
                  enum:
                    - LicenseKey
          title: License Key
      discriminator:
        propertyName: payload_type
    PatchCustomerRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
    PatchLicenseKeyInstanceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    PatchLicenseKeyRequest:
      type: object
      properties:
        activations_limit:
          type: integer
          format: int32
          description: |-
            The updated activation limit for the license key.
            Use `null` to remove the limit, or omit this field to leave it unchanged.
          nullable: true
        disabled:
          type: boolean
          description: >-
            Indicates whether the license key should be disabled.

            A value of `true` disables the key, while `false` enables it. Omit this field to leave it
            unchanged.
          nullable: true
        expires_at:
          type: string
          format: date-time
          description: |-
            The updated expiration timestamp for the license key in UTC.
            Use `null` to remove the expiration date, or omit this field to leave it unchanged.
          nullable: true
    PatchProductRequest:
      type: object
      properties:
        description:
          type: string
          description: Description of the product, optional and must be at most 1000 characters.
          nullable: true
        image_id:
          type: string
          format: uuid
          description: Product image id after its uploaded to S3
          nullable: true
        license_key_activation_message:
          type: string
          description: |-
            Message sent to the customer upon license key activation.

            Only applicable if `license_key_enabled` is `true`. This message contains instructions for
            activating the license key.
          nullable: true
        license_key_activations_limit:
          type: integer
          format: int32
          description: |-
            Limit for the number of activations for the license key.

            Only applicable if `license_key_enabled` is `true`. Represents the maximum number of times
            the license key can be activated.
          nullable: true
        license_key_duration:
          allOf:
            - $ref: '#/components/schemas/LicenseKeyDuration'
          nullable: true
        license_key_enabled:
          type: boolean
          description: >-
            Whether the product requires a license key.


            If `true`, additional fields related to license key (duration, activations limit, activation
            message)

            become applicable.
          nullable: true
        name:
          type: string
          description: Name of the product, optional and must be at most 100 characters.
          nullable: true
        price:
          allOf:
            - $ref: '#/components/schemas/Price'
          nullable: true
        tax_category:
          allOf:
            - $ref: '#/components/schemas/TaxCategory'
          nullable: true
    PatchSubscriptionRequest:
      type: object
      properties:
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          nullable: true
        status:
          allOf:
            - $ref: '#/components/schemas/SubscriptionStatus'
          nullable: true
    PaymentResponse:
      type: object
      required:
        - payment_id
        - business_id
        - total_amount
        - currency
        - created_at
        - disputes
        - refunds
        - customer
        - metadata
      properties:
        business_id:
          type: string
          description: Identifier of the business associated with the payment
        created_at:
          type: string
          format: date-time
          description: Timestamp when the payment was created
        currency:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/CustomerLimitedDetailsResponse'
        disputes:
          type: array
          items:
            $ref: '#/components/schemas/DisputeResponse'
          description: List of disputes associated with this payment
        error_message:
          type: string
          description: An error message if the payment failed
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        payment_id:
          type: string
          description: Unique identifier for the payment
        payment_link:
          type: string
          description: Checkout URL
          nullable: true
        payment_method:
          type: string
          description: Payment method used by customer (e.g. "card", "bank_transfer")
          nullable: true
        payment_method_type:
          type: string
          description: Specific type of payment method (e.g. "visa", "mastercard")
          nullable: true
        product_cart:
          type: array
          items:
            $ref: '#/components/schemas/OneTimeProductCartItemResponse'
          description: List of products purchased in a one-time payment
          nullable: true
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/RefundResponse'
          description: List of refunds issued for this payment
        status:
          allOf:
            - $ref: '#/components/schemas/IntentStatus'
          nullable: true
        subscription_id:
          type: string
          description: Identifier of the subscription if payment is part of a subscription
          nullable: true
        tax:
          type: integer
          format: int32
          description: Amount of tax collected in smallest currency unit (e.g. cents)
          nullable: true
        total_amount:
          type: integer
          format: int32
          description: Total amount charged to the customer including tax, in smallest currency unit (e.g. cents)
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the payment was last updated
          nullable: true
    PayoutStatus:
      type: string
      enum:
        - in_progress
        - failed
        - success
    PayoutsResponse:
      type: object
      required:
        - payout_id
        - business_id
        - payment_method
        - status
        - fee
        - tax
        - amount
        - created_at
        - updated_at
        - currency
        - refunds
        - chargebacks
      properties:
        amount:
          type: integer
          format: int32
          description: The total amount of the payout.
        business_id:
          type: string
          description: The unique identifier of the business associated with the payout.
        chargebacks:
          type: integer
          format: int32
          description: The total value of chargebacks associated with the payout.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the payout was created, in UTC.
        currency:
          $ref: '#/components/schemas/Currency'
        fee:
          type: integer
          format: int32
          description: The fee charged for processing the payout.
        name:
          type: string
          description: The name of the payout recipient or purpose.
          nullable: true
        payment_method:
          type: string
          description: The payment method used for the payout (e.g., bank transfer, card, etc.).
        payout_document_url:
          type: string
          description: The URL of the document associated with the payout.
          nullable: true
        payout_id:
          type: string
          description: The unique identifier of the payout.
        refunds:
          type: integer
          format: int32
          description: The total value of refunds associated with the payout.
        remarks:
          type: string
          description: Any additional remarks or notes associated with the payout.
          nullable: true
        status:
          $ref: '#/components/schemas/PayoutStatus'
        tax:
          type: integer
          format: int32
          description: The tax applied to the payout.
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the payout was last updated, in UTC.
    Price:
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/OneTimePrice'
            - type: object
              required:
                - type
              properties:
                type:
                  type: string
                  enum:
                    - one_time_price
          title: One Time Price
        - allOf:
            - $ref: '#/components/schemas/RecurringPrice'
            - type: object
              required:
                - type
              properties:
                type:
                  type: string
                  enum:
                    - recurring_price
          title: Recurring Price
      discriminator:
        propertyName: type
    RecurringPrice:
      type: object
      required:
        - price
        - currency
        - discount
        - purchasing_power_parity
        - payment_frequency_count
        - payment_frequency_interval
        - subscription_period_count
        - subscription_period_interval
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        discount:
          type: number
          format: float
          description: Discount applied to the price, represented as a percentage (0 to 100).
        payment_frequency_count:
          type: integer
          format: int32
          description: >-
            Number of units for the payment frequency.

            For example, a value of `1` with a `payment_frequency_interval` of `month` represents monthly
            payments.
        payment_frequency_interval:
          $ref: '#/components/schemas/TimeInterval'
        price:
          type: integer
          format: int32
          description: |-
            The payment amount. Represented in the lowest denomination of the currency (e.g., cents for USD).
            For example, to charge $1.00, pass `100`.
        purchasing_power_parity:
          type: boolean
          description: |-
            Indicates if purchasing power parity adjustments are applied to the price.
            Purchasing power parity feature is not available as of now
        subscription_period_count:
          type: integer
          format: int32
          description: >-
            Number of units for the subscription period.

            For example, a value of `12` with a `subscription_period_interval` of `month` represents a
            one-year subscription.
        subscription_period_interval:
          $ref: '#/components/schemas/TimeInterval'
        tax_inclusive:
          type: boolean
          description: Indicates if the price is tax inclusive
          nullable: true
        trial_period_days:
          type: integer
          format: int32
          description: Number of days for the trial period. A value of `0` indicates no trial period.
    RefundResponse:
      type: object
      required:
        - refund_id
        - payment_id
        - business_id
        - status
        - created_at
      properties:
        amount:
          type: integer
          format: int32
          description: The refunded amount.
          nullable: true
        business_id:
          type: string
          description: The unique identifier of the business issuing the refund.
        created_at:
          type: string
          format: date-time
          description: The timestamp of when the refund was created in UTC.
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
          nullable: true
        payment_id:
          type: string
          description: The unique identifier of the payment associated with the refund.
        reason:
          type: string
          description: The reason provided for the refund, if any. Optional.
          nullable: true
        refund_id:
          type: string
          description: The unique identifier of the refund.
        status:
          $ref: '#/components/schemas/RefundStatus'
    RefundStatus:
      type: string
      enum:
        - succeeded
        - failed
        - pending
        - review
    SubscriptionResponse:
      type: object
      description: Response struct representing subscription details
      required:
        - subscription_id
        - recurring_pre_tax_amount
        - tax_inclusive
        - currency
        - status
        - created_at
        - product_id
        - quantity
        - trial_period_days
        - subscription_period_interval
        - payment_frequency_interval
        - subscription_period_count
        - payment_frequency_count
        - next_billing_date
        - customer
        - metadata
      properties:
        created_at:
          type: string
          format: date-time
          description: Timestamp when the subscription was created
        currency:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/CustomerLimitedDetailsResponse'
        metadata:
          $ref: '#/components/schemas/Metadata'
        next_billing_date:
          type: string
          format: date-time
          description: Timestamp of the next scheduled billing
        payment_frequency_count:
          type: integer
          format: int32
          description: Number of payment frequency intervals
        payment_frequency_interval:
          $ref: '#/components/schemas/TimeInterval'
        product_id:
          type: string
          description: Identifier of the product associated with this subscription
        quantity:
          type: integer
          format: int32
          description: Number of units/items included in the subscription
        recurring_pre_tax_amount:
          type: integer
          format: int32
          description: Amount charged before tax for each recurring payment in smallest currency unit (e.g. cents)
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        subscription_id:
          type: string
          description: Unique identifier for the subscription
        subscription_period_count:
          type: integer
          format: int32
          description: Number of subscription period intervals
        subscription_period_interval:
          $ref: '#/components/schemas/TimeInterval'
        tax_inclusive:
          type: boolean
          description: Indicates if the recurring_pre_tax_amount is tax inclusive
        trial_period_days:
          type: integer
          format: int32
          description: Number of days in the trial period (0 if no trial)
    SubscriptionStatus:
      type: string
      enum:
        - pending
        - active
        - on_hold
        - paused
        - cancelled
        - failed
        - expired
    TaxCategory:
      type: string
      description: Represents the different categories of taxation applicable to various products and services.
      enum:
        - digital_products
        - saas
        - e_book
    TimeInterval:
      type: string
      enum:
        - Day
        - Week
        - Month
        - Year
    UpdateProductImageResponse:
      type: object
      required:
        - url
      properties:
        image_id:
          type: string
          format: uuid
          nullable: true
        url:
          type: string
    ValidateLicenseKeyRequest:
      type: object
      required:
        - license_key
      properties:
        license_key:
          type: string
          example: 2b1f8e2d-c41e-4e8f-b2d3-d9fd61c38f43
        license_key_instance_id:
          type: string
          example: lki_123
          nullable: true
    ValidateLicenseKeyResponse:
      type: object
      required:
        - valid
      properties:
        valid:
          type: boolean
          example: true
    WebhookEventLogResponse:
      type: object
      required:
        - event_id
        - business_id
        - event_type
        - object_id
        - created_at
      properties:
        business_id:
          type: string
        created_at:
          type: string
          format: date-time
        event_id:
          type: string
        event_type:
          type: string
        latest_attempted_at:
          type: string
          format: date-time
          nullable: true
        object_id:
          type: string
        request:
          type: string
          nullable: true
        response:
          type: string
          nullable: true
  securitySchemes:
    API_KEY:
      type: http
      scheme: bearer
tags:
  - name: Products
  - name: Payments
  - name: Subscriptions
  - name: Customers
  - name: Refunds
  - name: Disputes
  - name: License Keys
  - name: Licenses
  - name: Outgoing Webhooks
  - name: Checkout
  - name: Webhook Events