
Create a guide for using usage based billig in this usage-based-billing-sample-implementation.mdx

Think of a fictional AI image generation company which will generate image based on user input and charges for per image generation.
Go from Meter Creation through dashboard, Linking it in product and sending events to Dodo Payments
Take the below code for example code to provide for merchants. It has image generation part, you have to add event ingestion code as well.

The point is to show how to configure meter, link in product and how to send events to dodo payments.
Should be clear as welll


import 'dotenv/config';
import OpenAI from 'openai';
import * as readline from 'readline';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // Make sure to set your API key in environment variables
});

// DALL-E 3 pricing (as of 2024-2025)
const PRICING = {
  'standard': 0.040, // $0.040 per image (1024√ó1024)
  'hd': 0.080,       // $0.080 per image (1024√ó1024, HD quality)
};

interface ImageGenerationOptions {
  prompt: string;
  model?: 'dall-e-3' | 'dall-e-2';
  quality?: 'standard' | 'hd';
  size?: '1024x1024' | '1792x1024' | '1024x1792';
  style?: 'vivid' | 'natural';
}

async function generateImage(options: ImageGenerationOptions) {
  const startTime = Date.now();
  
  try {
    console.log('üé® Generating image...');
    console.log(`Prompt: "${options.prompt}"`);
    console.log(`Quality: ${options.quality || 'standard'}`);
    console.log(`Size: ${options.size || '1024x1024'}`);
    
    const response = await openai.images.generate({
      model: options.model || 'dall-e-3',
      prompt: options.prompt,
      n: 1,
      size: options.size || '1024x1024',
      quality: options.quality || 'standard',
      style: options.style || 'vivid',
    });

    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;

    // Calculate cost based on quality
    const cost = PRICING[options.quality || 'standard'];
    
    console.log('\n‚úÖ Image generated successfully!');
    console.log(`üìä Generation Stats:`);
    console.log(`   ‚Ä¢ Duration: ${duration.toFixed(2)} seconds`);
    console.log(`   ‚Ä¢ Quality: ${options.quality || 'standard'}`);
    console.log(`   ‚Ä¢ Cost: $${cost.toFixed(3)}`);
    console.log(`   ‚Ä¢ Image URL: ${response.data?.[0]?.url}`);
    
    if (response.data?.[0]?.revised_prompt) {
      console.log(`   ‚Ä¢ Revised prompt: "${response.data[0].revised_prompt}"`);
    }

    return {
      imageUrl: response.data?.[0].url,
      revisedPrompt: response.data?.[0].revised_prompt,
      cost: cost,
      duration: duration,
    };

  } catch (error) {
    console.error('‚ùå Error generating image:', error);
    throw error;
  }
}

async function getUserInput(): Promise<string> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    rl.question('Enter your image prompt: ', (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

async function main() {
  console.log('üñºÔ∏è  OpenAI Image Generator\n');
  
  // Check if API key is set
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå Error: OPENAI_API_KEY environment variable is not set.');
    console.log('Please set your OpenAI API key:');
    console.log('export OPENAI_API_KEY="your-api-key-here"');
    process.exit(1);
  }

  try {
    const prompt = await getUserInput();
    
    if (!prompt.trim()) {
      console.log('‚ùå No prompt provided. Exiting...');
      return;
    }

    const result = await generateImage({
      prompt: prompt.trim(),
      quality: 'standard', // Change to 'hd' for higher quality (costs more)
      size: '1024x1024',
      style: 'vivid'
    });

    console.log('\nüéâ Process completed successfully!');
    console.log(`Total cost: $${result.cost.toFixed(3)}`);
    
  } catch (error) {
    console.error('‚ùå Application error:', error);
    process.exit(1);
  }
}

// Run the application
if (require.main === module) {
  main().catch(console.error);
}
